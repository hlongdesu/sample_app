Searching 1033 files for "user"

/home/longtran/sample_app/app/assets/stylesheets/custom.scss:
  109  /* sidebar */
  110  aside {
  111:   section.user_info {
  112      margin-top: 20px;
  113    }
  ...
  166  }
  167
  168: .user_avatars {
  169    overflow: auto;
  170    margin-top: 10px;
  ...
  177  }
  178
  179: .users.follow {
  180    padding: 0;
  181  }
  ...
  222  }
  223
  224: /* Users index */
  225: .users {
  226    list-style: none;
  227    margin: 0;
  ...
  241      border-top: 1px solid #e8e8e8;
  242    }
  243:   .user {
  244      margin-top: 5em;
  245      padding-top: 0;

/home/longtran/sample_app/app/controllers/account_activations_controller.rb:
    1  class AccountActivationsController < ApplicationController
    2    def edit
    3:     user = User.find_by email: params[:email]
    4:     if user && !user.activated? && user.authenticated?(:activation, params[:id])
    5:       user.activate
    6:       log_in user
    7        flash[:success] = t "account_activated"
    8:       redirect_to user
    9      else
   10        flash[:danger] = t "invalid_activation_link"

/home/longtran/sample_app/app/controllers/application_controller.rb:
    5    private
    6
    7:   def logged_in_user
    8      return if logged_in?
    9      store_location

/home/longtran/sample_app/app/controllers/microposts_controller.rb:
    1  class MicropostsController < ApplicationController
    2:   before_action :logged_in_user, only: %i(create destroy)
    3:   before_action :correct_user, only: :destroy
    4
    5    def create
    6:     @micropost = current_user.microposts.build micropost_params
    7      if @micropost.save
    8        flash[:success] = t "micropost_created"
    .
   29    end
   30
   31:   def correct_user
   32:     @micropost = current_user.microposts.find_by id: params[:id]
   33      redirect_to root_path unless @micropost
   34    end

/home/longtran/sample_app/app/controllers/password_resets_controller.rb:
    1  class PasswordResetsController < ApplicationController
    2:   before_action :load_user, :valid_user, :check_expiration,
    3      only: %i(edit update)
    4
    .
    6
    7    def create
    8:     @user = User.find_by(email: params[:password_reset][:email].downcase)
    9:     if @user
   10:       @user.create_reset_digest
   11:       @user.send_password_reset_email
   12        flash[:info] = t "mail_reset"
   13        redirect_to root_path
   ..
   21
   22    def update
   23:     if params[:user][:password].blank?
   24:       @user.errors.add :password, t("errors.password_not_empty")
   25        render :edit
   26:     elsif @user.update_attributes user_params
   27:       log_in @user
   28:       @user.update_attribute(:reset_digest, nil)
   29        flash[:success] = t "password_have_been_reset"
   30:       redirect_to @user
   31      else
   32        render :edit
   ..
   36    private
   37
   38:   def user_params
   39:     params.require(:user).permit :password, :password_confirmation
   40    end
   41
   42:   def load_user
   43:     @user = User.find_by email: params[:email]
   44:     return if @user
   45:     flash[:danger] = t "errors.user_not_found"
   46      redirect_to root_path
   47    end
   48
   49:   def valid_user
   50:     return if @user&.activated? && @user.authenticated?(:reset, params[:id])
   51:     flash[:danger] = t "errors.invalid_user"
   52      redirect_to root_path
   53    end
   54
   55    def check_expiration
   56:     return false unless @user.password_reset_expired?
   57      flash[:danger] = t "errors.pass_has_expired"
   58      redirect_to new_password_reset_path

/home/longtran/sample_app/app/controllers/relationships_controller.rb:
    1  class RelationshipsController < ApplicationController
    2:   before_action :logged_in_user
    3:   before_action :load_user, only: :create
    4    before_action :load_relationship, only: :destroy
    5
    6    def create
    7:     current_user.follow @user
    8      respond_to do |format|
    9:       format.html{redirect_to @user}
   10        format.js
   11      end
   ..
   13
   14    def destroy
   15:     @user = @relationship.followed
   16:     current_user.unfollow @user
   17      respond_to do |format|
   18:       format.html{redirect_to @user}
   19        format.js
   20      end
   ..
   23    private
   24
   25:   def load_user
   26:     @user = User.find_by id: params[:followed_id]
   27:     return if @user
   28:     flash[:danger] = t "errors.user_not_found"
   29      redirect_to root_path
   30    end
   ..
   33      @relationship = Relationship.find_by id: params[:id]
   34      return if @relationship
   35:     flash[:danger] = t "errors.user_not_found"
   36      redirect_to root_path
   37    end

/home/longtran/sample_app/app/controllers/sessions_controller.rb:
    3
    4    def create
    5:     user = User.find_by email: params[:session][:email].downcase
    6:     if user&.authenticate params[:session][:password]
    7:       check_active user
    8      else
    9:       flash.now[:danger] = t "errors.invalid_user"
   10        render :new
   11      end
   12    end
   13
   14:   def check_remember user
   15:     return remember user if params[:session][:remember_me] == Settings.checked
   16:     forget user
   17    end
   18
   ..
   24    private
   25
   26:   def check_active user
   27:     if user.activated?
   28:       log_in user
   29:       check_remember user
   30:       redirect_back_or user
   31      else
   32        flash[:warning] = t "errors.inactive_account"

/home/longtran/sample_app/app/controllers/static_pages_controller.rb:
    2    def home
    3      return unless logged_in?
    4:     @micropost  = current_user.microposts.build
    5:     @feed_items = current_user.feed.order_desc.paginate page: params[:page]
    6    end
    7

/home/longtran/sample_app/app/controllers/users_controller.rb:
    1: class UsersController < ApplicationController
    2:   before_action :logged_in_user, except: %i(new show create)
    3:   before_action :load_user, except: %i(new index create)
    4:   before_action :correct_user, only: %i(edit update)
    5:   before_action :admin_user, only: :destroy
    6
    7    def index
    8:     @users = User.paginate page: params[:page],
    9        per_page: Settings.per_page
   10    end
   11
   12    def show
   13:     @microposts = @user.microposts.order_desc.paginate page: params[:page]
   14    end
   15
   16    def new
   17:     @user = User.new
   18    end
   19
   20    def create
   21:     @user = User.new user_params
   22:     if @user.save
   23:       @user.send_activation_email
   24        flash[:info] = t "check_activaion_link"
   25        redirect_to root_path
   ..
   32
   33    def update
   34:     if @user.update_attributes user_params
   35        flash[:success] = t "profile_updated"
   36:       redirect_to @user
   37      else
   38        render :edit
   ..
   41
   42    def destroy
   43:     if @user.destroy
   44:       flash[:success] = t "user_deleted"
   45:       redirect_to users_url
   46      else
   47        flash[:danger] = t "errors.delete_failed"
   ..
   52    def following
   53      @title = t "following"
   54:     @users = @user.following.paginate page: params[:page]
   55      render :show_follow
   56    end
   ..
   58    def followers
   59      @title = t "followers"
   60:     @users = @user.followers.paginate page: params[:page]
   61      render :show_follow
   62    end
   ..
   64    private
   65
   66:   def user_params
   67:     params.require(:user).permit :name, :email, :password,
   68        :password_confirmation
   69    end
   70
   71:   def logged_in_user
   72      return if logged_in?
   73      store_location
   ..
   76    end
   77
   78:   def correct_user
   79:     redirect_to root_path unless current_user? @user
   80    end
   81
   82:   def admin_user
   83:     redirect_to root_path unless current_user.admin?
   84    end
   85
   86:   def load_user
   87:     @user = User.find_by id: params[:id]
   88:     return if @user
   89
   90:     flash[:danger] = t "errors.user_not_found"
   91      redirect_to root_path
   92    end

/home/longtran/sample_app/app/helpers/application_helper.rb:
   10
   11    def current_relationship
   12:     if current_user.following? @user
   13:       current_user.active_relationships.find_by(followed_id: @user.id)
   14      else
   15:       current_user.active_relationships.build
   16      end
   17    end

/home/longtran/sample_app/app/helpers/sessions_helper.rb:
    1  module SessionsHelper
    2:   def log_in user
    3:     session[:user_id] = user.id
    4    end
    5
    6:   def remember user
    7:     user.remember
    8:     cookies.permanent.signed[:user_id] = user_id
    9:     cookies.permanent[:remember_token] = user.remember_token
   10    end
   11
   12:   def current_user
   13:     if user_id = session[:user_id]
   14:       @current_user ||= User.find_by id: user_id
   15:     elsif user_id = cookies.signed[:user_id]
   16:       user = User.find_by(id: user_id)
   17:       if user&.authenticated?(:remenmber, cookies[:remember_token])
   18:         log_in user
   19:         @current_user = user
   20        end
   21      end
   22    end
   23
   24:   def current_user? user
   25:     user == current_user
   26    end
   27
   28    def logged_in?
   29:     current_user.present?
   30    end
   31
   32:   def forget user
   33:     user.forget
   34:     cookies.delete(:user_id, :remember_token)
   35    end
   36
   37    def log_out
   38:     forget current_user
   39:     session.delete :user_id
   40:     @current_user = nil
   41    end
   42

/home/longtran/sample_app/app/helpers/users_helper.rb:
    1: module UsersHelper
    2:   def gravatar_for user, options = {size: Settings.avatar_size}
    3:     gravatar_id = Digest::MD5.hexdigest(user.email.downcase)
    4      size = options[:size]
    5      gravatar_url = "https://secure.gravatar.com/avatar/#{gravatar_id}?s=#{size}"
    6:     image_tag(gravatar_url, alt: user.name, class: "gravatar")
    7    end
    8  end

/home/longtran/sample_app/app/mailers/user_mailer.rb:
    1: class UserMailer < ApplicationMailer
    2:   def account_activation user
    3:     @user = user
    4:     mail to: user.email, subject: I18n.t("account_activation")
    5    end
    6
    7:   def password_reset user
    8:     @user = user
    9:     mail to: user.email, subject: I18n.t("password_reset")
   10    end
   11  end

/home/longtran/sample_app/app/models/micropost.rb:
    1  class Micropost < ApplicationRecord
    2:   belongs_to :user
    3    scope :order_desc, ->{order(created_at: :desc)}
    4:   scope :feed, ->(following_ids){where user_id: following_ids}
    5:   validates :user_id, presence: true
    6    validates :content, presence: true, length: {maximum: Settings.content_max}
    7    validate  :picture_size

/home/longtran/sample_app/app/models/relationship.rb:
    1  class Relationship < ApplicationRecord
    2:   belongs_to :follower, class_name: User.name
    3:   belongs_to :followed, class_name: User.name
    4    validates :follower_id, presence: true
    5    validates :followed_id, presence: true

/home/longtran/sample_app/app/models/user.rb:
    1: class User < ApplicationRecord
    2    attr_accessor :remember_token, :activation_token, :reset_token
    3    before_save :downcase_email
    .
   36
   37    def remember
   38:     self.remember_token = User.new_token
   39:     update_attribute :remember_digest, User.digest(remember_token)
   40    end
   41
   ..
   55
   56    def send_activation_email
   57:     UserMailer.account_activation(self).deliver_now
   58    end
   59
   60    def create_reset_digest
   61:     self.reset_token = User.new_token
   62:     update_columns reset_digest: User.digest(reset_token),
   63        reset_sent_at: Time.zone.now
   64    end
   65
   66    def send_password_reset_email
   67:     UserMailer.password_reset(self).deliver_now
   68    end
   69
   ..
   77    end
   78
   79:   def follow other_user
   80:     following << other_user
   81    end
   82
   83:   def unfollow other_user
   84:     following.delete other_user
   85    end
   86
   87:   def following? other_user
   88:     following.include? other_user
   89    end
   90
   ..
   96
   97    def create_activation_digest
   98:     self.activation_token  = User.new_token
   99:     self.activation_digest = User.digest activation_token
  100    end
  101  end

/home/longtran/sample_app/app/views/layouts/_header.html.erb:
    7          <li><%= link_to t("static_pages.help.title"), help_path %></li>
    8          <% if logged_in? %>
    9:           <li><%= link_to t("users"), users_path %></li>
   10            <li class="dropdown">
   11              <%= link_to t("account"), "#", "data-toggle": "dropdown", class: "dropdown-toggle" %>
   12              <ul class="dropdown-menu">
   13:               <li><%= link_to t("profile"), current_user %></li>
   14:               <li><%= link_to t("settings"), edit_user_path(current_user) %></li>
   15                <li class="divider"></li>
   16                <li>

/home/longtran/sample_app/app/views/microposts/_micropost.html.erb:
    1  <li id="micropost-<%= micropost.id %>">
    2:   <%= link_to gravatar_for(micropost.user, size: Settings.gravatar), micropost.user %>
    3:   <span class="user"><%= link_to micropost.user.name, micropost.user %></span>
    4    <span class="content">
    5      <%= micropost.content %>
    .
    8    <span class="timestamp">
    9      <%= t "posted_ago", time: time_ago_in_words(micropost.created_at) %>
   10:      <% if current_user?(micropost.user) %>
   11        <%= link_to t("delete"), micropost, method: :delete,
   12          data: {confirm: t("sure?")} %>

/home/longtran/sample_app/app/views/password_resets/edit.html.erb:
    3  <div class="row">
    4    <div class="col-md-6 col-md-offset-3">
    5:     <%= form_for @user, url: password_reset_path(params[:id]) do |f| %>
    6        <%= render "shared/error_messages" %>
    7
    8:       <%= hidden_field_tag :email, @user.email %>
    9
   10        <%= f.label :password, t("form.password") %>

/home/longtran/sample_app/app/views/relationships/create.js.erb:
    1: $("#follow_form").html("<%= j render "users/unfollow" %>");
    2: $("#followers").html("<%= @user.followers.count %>");
    3

/home/longtran/sample_app/app/views/relationships/destroy.js.erb:
    1: $("#follow_form").html("<%= j render "users/follow" %>");
    2: $("#followers").html("<%= @user.followers.count %>");
    3

/home/longtran/sample_app/app/views/sessions/new.html.erb:
   19      <% end %>
   20
   21:     <p><%= t "new_user" %><%= link_to t("signup"), signup_path %></p>
   22    </div>
   23  </div>

/home/longtran/sample_app/app/views/shared/_stats.html.erb:
    1: <% @user ||= current_user %>
    2  <div class="stats">
    3:   <a href="<%= following_user_path(@user) %>">
    4      <strong id="following" class="stat">
    5:       <%= @user.following.count %>
    6      </strong>
    7      <%= t "following" %>
    8    </a>
    9:   <a href="<%= followers_user_path(@user) %>">
   10      <strong id="followers" class="stat">
   11:       <%= @user.followers.count %>
   12      </strong>
   13      <%= t "followers" %>

/home/longtran/sample_app/app/views/shared/_user_info.html.erb:
    1: <%= link_to gravatar_for(current_user, size: Settings.gravatar), current_user %>
    2: <h1><%= current_user.name %></h1>
    3: <span><%= link_to t("view_profile"), current_user %></span>
    4: <span><%= t "micropost", count: current_user.microposts.count %></span>
    5

/home/longtran/sample_app/app/views/static_pages/home.html.erb:
    2    <div class="row">
    3      <aside class="col-md-4">
    4:       <section class="user_info">
    5:         <%= render "shared/user_info" %>
    6        </section>
    7        <section class="stats">

/home/longtran/sample_app/app/views/user_mailer/account_activation.html.erb:
    1  <h1><%= t("static_pages.home.sample_app") %></h1>
    2: <p><%= t "email_greeting", name: @user.name %></p>
    3  <p><%= t "activation_content" %></p>
    4  <%= link_to t("account_activation"),
    5:   edit_account_activation_url(@user.activation_token, email: @user.email) %>
    6

/home/longtran/sample_app/app/views/user_mailer/account_activation.text.erb:
    1: <%= t "email_greeting", name: @user.name %>,
    2  <%= t "activation_content" %>
    3: <%= edit_account_activation_url(@user.activation_token, email: @user.email) %>
    4

/home/longtran/sample_app/app/views/user_mailer/password_reset.html.erb:
    1  <h1><%= t "reset_password" %></h1>
    2  <p><%= t ".content1" %></p>
    3: <%= link_to t("reset_password"), edit_password_reset_url(@user.reset_token,
    4:   email: @user.email) %>
    5  <p><%= t ".content2" %></p>
    6  <p><%= t ".content3" %></p>

/home/longtran/sample_app/app/views/user_mailer/password_reset.text.erb:
    1  <%= t ".content1" %>
    2: <%= edit_password_reset_url @user.reset_token, email: @user.email %>
    3  <%= t ".content2" %>
    4  <%= t ".content3"%>

/home/longtran/sample_app/app/views/users/_follow.html.erb:
    1  <%= form_for current_relationship, remote: true do |f| %>
    2:   <div><%= hidden_field_tag :followed_id, @user.id %></div>
    3    <%= f.submit t("follow"), class: "btn btn-primary" %>
    4  <% end %>

/home/longtran/sample_app/app/views/users/_follow_form.html.erb:
    1: <% unless current_user?(@user) %>
    2    <div id="follow_form">
    3:   <% if current_user.following?(@user) %>
    4      <%= render "unfollow" %>
    5    <% else %>

/home/longtran/sample_app/app/views/users/_form.html.erb:
    1: <%= form_for(@user) do |f| %>
    2    <%= render "shared/error_messages", object: f.object %>
    3

/home/longtran/sample_app/app/views/users/_user.html.erb:
    1  <li>
    2:   <%= gravatar_for user, size: Settings.gravatar %>
    3:   <%= link_to user.name, user %>
    4:   <% if current_user.admin? && !current_user?(user) %> |
    5:     <%= link_to t("delete"), user, method: :delete, data: {confirm: t("sure?")} %>
    6    <% end %>
    7  </li>

/home/longtran/sample_app/app/views/users/edit.html.erb:
    1: <% provide :title, t("edit_user") %>
    2  <% provide :button_text, t("form.save_changes") %>
    3  <h1><%= t "update_profile" %></h1>
    .
    6      <%= render "form" %>
    7      <div class="gravatar_edit">
    8:       <%= gravatar_for @user %>
    9        <a href="http://gravatar.com/emails" target="_blank"><%= t "form.change" %></a>
   10      </div>

/home/longtran/sample_app/app/views/users/index.html.erb:
    1: <% provide :title, t("all_users") %>
    2: <h1><%= t "all_users" %></h1>
    3  <%= will_paginate %>
    4: <ul class="users">
    5:   <%= render @users %>
    6  </ul>
    7  <%= will_paginate %>

/home/longtran/sample_app/app/views/users/show.html.erb:
    1: <% provide :title, @user.name %>
    2  <div class="row">
    3    <aside class="col-md-4">
    4:     <section class="user_info">
    5        <h1>
    6:         <%= gravatar_for @user %>
    7:         <%= @user.name %>
    8        </h1>
    9      </section>
   ..
   14      <div class="col-md-8">
   15      <%= render "follow_form" if logged_in? %>
   16:     <% if @user.microposts.any? %>
   17:       <h3><%= t "micropost", count: @user.microposts.count %></h3>
   18        <ol class="microposts">
   19          <%= render @microposts %>

/home/longtran/sample_app/app/views/users/show_follow.html.erb:
    2  <div class="row">
    3    <aside class="col-md-4">
    4:     <section class="user_info">
    5:       <%= gravatar_for @user %>
    6:       <h1><%= @user.name %></h1>
    7:       <span><%= link_to t("view_profile"), current_user %></span>
    8:       <span><b><%= t "microposts", count: @user.microposts.size %></b></span>
    9      </section>
   10      <section class="stats">
   11        <%= render "shared/stats" %>
   12:       <% if @users.any? %>
   13:         <div class="user_avatars">
   14:           <% @users.each do |user| %>
   15:             <%= link_to gravatar_for(user, size: Settings.gravatar), user %>
   16            <% end %>
   17          </div>
   ..
   21    <div class="col-md-8">
   22      <h3><%= @title %></h3>
   23:     <% if @users.any? %>
   24:       <ul class="users follow">
   25:         <%= render @users %>
   26        </ul>
   27        <%= will_paginate %>

/home/longtran/sample_app/config/application.yml:
    1: gmail_username: "hoanglong2711997@gmail.com"
    2  gmail_password: "Long1997.,,."
    3

/home/longtran/sample_app/config/environments/development.rb:
   40      port: Settings.port,
   41      domain: Settings.domain,
   42:     user_name: ENV["gmail_username"],
   43      password: ENV["gmail_password"],
   44      authentication: Settings.authentication,

/home/longtran/sample_app/config/locales/en.yml:
   54        screencast: "screencast series"
   55        main:  "Ruby on Rails"
   56:   users:
   57      new:
   58:       signup_html: "This will be a signup page for new users."
   59    main_title: "Ruby on Rails Tutorial Sample App"
   60    signup: "Sign up now!"
   61    login: "Login"
   62:   new_user: "New user? "
   63    news: "News"
   64    tutorial: "Ruby on Rails Tutorial"
   ..
   69    settings: "Settings"
   70    logout: "Log Out"
   71:   users: "Users"
   72    account: "Account"
   73    profile_updated: "Profile updated"
   74:   all_users: "All users"
   75    delete: "Delete"
   76    sure?: "You sure?"
   77    update_profile: "Update your profile"
   78:   user_deleted: "User deleted"
   79    account_activated: "Account Activated!"
   80    invalid_activation_link: "Invalid activation link"
   ..
   88    mail_reset: "Email sent with password reset instructions"
   89    password_reset: "Password reset"
   90:   edit_user: "Edit user"
   91:   user_mailer:
   92      password_reset:
   93        content1: "To reset your password click the link below:"
   ..
  118      confirmation: "Confirmation"
  119      remember_me: "Remember me on this computer"
  120:     edit: "Edit user"
  121      save_changes: "Save changes"
  122      change: "Change"
  ...
  127      password_has_expired: "Password reset has expired"
  128      email_not_found: "Email not found"
  129:     invalid_user: "Invalid User"
  130:     user_not_found: "Users Not Found"
  131      please_login: "Please log in."
  132      delete_failed: "Deleted Failed"

/home/longtran/sample_app/config/routes.rb:
    5    get "/about", to: "static_pages#about"
    6    get "/contact", to: "static_pages#contact"
    7:   get "/signup", to: "users#new"
    8    get "/login", to: "sessions#new"
    9    post "/login", to: "sessions#create"
   10    delete "/logout", to: "sessions#destroy"
   11:   resources :users do
   12      member do
   13        get :following, :followers

/home/longtran/sample_app/db/development.sqlite3:
    <binary>

/home/longtran/sample_app/db/migrate/20190529033504_create_users.rb:
    1: class CreateUsers < ActiveRecord::Migration[5.2]
    2    def change
    3:     create_table :users do |t|
    4        t.string :name
    5        t.string :email

/home/longtran/sample_app/db/migrate/20190529035455_add_index_to_users_email.rb:
    1: class AddIndexToUsersEmail < ActiveRecord::Migration[5.2]
    2    def change
    3:     add_index :users, :email, unique: true
    4    end
    5  end

/home/longtran/sample_app/db/migrate/20190529035833_add_password_digest_to_users.rb:
    1: class AddPasswordDigestToUsers < ActiveRecord::Migration[5.2]
    2    def change
    3:     add_column :users, :password_digest, :string
    4    end
    5  end

/home/longtran/sample_app/db/migrate/20190530075249_add_remember_digest_to_users.rb:
    1: class AddRememberDigestToUsers < ActiveRecord::Migration[5.2]
    2    def change
    3:     add_column :users, :remember_digest, :string
    4    end
    5  end

/home/longtran/sample_app/db/migrate/20190531024608_add_admin_to_users.rb:
    1: class AddAdminToUsers < ActiveRecord::Migration[5.2]
    2    def change
    3:     add_column :users, :admin, :boolean, default: false
    4    end
    5  end

/home/longtran/sample_app/db/migrate/20190531092119_add_activation_to_users.rb:
    1: class AddActivationToUsers < ActiveRecord::Migration[5.2]
    2    def change
    3:     add_column :users, :activation_digest, :string
    4:     add_column :users, :activated, :boolean, default: false
    5:     add_column :users, :activated_at, :datetime
    6    end
    7  end

/home/longtran/sample_app/db/migrate/20190603020518_add_reset_to_users.rb:
    1: class AddResetToUsers < ActiveRecord::Migration[5.2]
    2    def change
    3:     add_column :users, :reset_digest, :string
    4:     add_column :users, :reset_sent_at, :datetime
    5    end
    6  end

/home/longtran/sample_app/db/migrate/20190603071210_create_microposts.rb:
    3      create_table :microposts do |t|
    4        t.text :content
    5:       t.references :user, foreign_key: true
    6
    7        t.timestamps
    8      end
    9:     add_index :microposts, [:user_id, :created_at]
   10    end
   11  end

/home/longtran/sample_app/db/schema.rb:
   15    create_table "microposts", force: :cascade do |t|
   16      t.text "content"
   17:     t.integer "user_id"
   18      t.datetime "created_at", null: false
   19      t.datetime "updated_at", null: false
   20      t.string "picture"
   21:     t.index ["user_id", "created_at"], name: "index_microposts_on_user_id_and_created_at"
   22:     t.index ["user_id"], name: "index_microposts_on_user_id"
   23    end
   24
   ..
   33    end
   34
   35:   create_table "users", force: :cascade do |t|
   36      t.string "name"
   37      t.string "email"
   ..
   46      t.string "reset_digest"
   47      t.datetime "reset_sent_at"
   48:     t.index ["email"], name: "index_users_on_email", unique: true
   49    end
   50

/home/longtran/sample_app/db/seeds.rb:
    1: User.create!(name: "Example User",
    2               email: "example@railstutorial.org",
    3               password: "foobar",
    .
   11    email = "example-#{n+1}@railstutorial.org"
   12    password = "password"
   13:   User.create!(name: name,
   14                 email: email,
   15                 password: password,
   ..
   19  end
   20
   21: users = User.order(:created_at).take(6)
   22  50.times do
   23    content = Faker::Lorem.sentence(5)
   24:   users.each { |user| user.microposts.create!(content: content) }
   25  end
   26
   27: users = User.all
   28: user  = users.first
   29: following = users[2..50]
   30: followers = users[3..40]
   31: following.each { |followed| user.follow(followed) }
   32: followers.each { |follower| follower.follow(user) }
   33
   34

/home/longtran/sample_app/db/test.sqlite3:
    <binary>

/home/longtran/sample_app/log/development.log:
    <binary>

/home/longtran/sample_app/log/test.log:
    <binary>

/home/longtran/sample_app/test/controllers/microposts_controller_test.rb:
   21
   22    test "should redirect destroy for wrong micropost" do
   23:     log_in_as(users(:michael))
   24      micropost = microposts(:ants)
   25      assert_no_difference "Micropost.count" do

/home/longtran/sample_app/test/controllers/relationships_controller_test.rb:
    2
    3  class RelationshipsControllerTest < ActionDispatch::IntegrationTest
    4:   test "create should require logged-in user" do
    5      assert_no_difference "Relationship.count" do
    6        post relationships_path
    .
    9    end
   10
   11:   test "destroy should require logged-in user" do
   12      assert_no_difference "Relationship.count" do
   13        delete relationship_path(relationships(:one))

/home/longtran/sample_app/test/controllers/users_controller_test.rb:
    1  require "test_helper"
    2
    3: class UsersControllerTest < ActionDispatch::IntegrationTest
    4    def setup
    5:     @user = users(:michael)
    6:     @other_user = users(:archer)
    7    end
    8    test "should get new" do
    .
   12
   13    test "should redirect edit when not logged in" do
   14:     get edit_user_path @user
   15      assert_not flash.empty?
   16      assert_redirected_to login_url
   ..
   18
   19    test "should redirect update when not logged in" do
   20:     patch user_path @user, params: {user: {name: @user.name,
   21:                                            email: @user.email}}
   22      assert_not flash.empty?
   23      assert_redirected_to login_url
   24    end
   25
   26:   test "should redirect edit when logged in as wrong user" do
   27:     log_in_as @other_user
   28:     get edit_user_path @user
   29      assert flash.empty?
   30      assert_redirected_to root_url
   31    end
   32
   33:   test "should redirect update when logged in as wrong user" do
   34:     log_in_as @other_user
   35:     patch user_path(@user), params: {user: {name: @user.name,
   36:                                             email: @user.email}}
   37      assert flash.empty?
   38      assert_redirected_to root_url
   ..
   40
   41    test "should redirect index when not logged in" do
   42:     get users_path
   43      assert_redirected_to login_url
   44    end
   45
   46    test "should not allow the admin attribute to be edited via the web" do
   47:     log_in_as @other_user
   48:     assert_not @other_user.admin?
   49:     patch user_path(@other_user), params: {
   50:       user: {password: "password",
   51               password_confirmation: "password",
   52               admin: true}
   53      }
   54:     assert_not @other_user.admin?
   55    end
   56
   57    test "should redirect destroy when not logged in" do
   58:     assert_no_difference "User.count" do
   59:       delete user_path @user
   60      end
   61      assert_redirected_to login_url
   ..
   63
   64    test "should redirect destroy when logged in as a non-admin" do
   65:     log_in_as @other_user
   66:     assert_no_difference "User.count" do
   67:       delete user_path @user
   68      end
   69      assert_redirected_to root_url
   ..
   71
   72    test "should redirect following when not logged in" do
   73:     get following_user_path(@user)
   74      assert_redirected_to login_url
   75    end
   76
   77    test "should redirect followers when not logged in" do
   78:     get followers_user_path(@user)
   79      assert_redirected_to login_url
   80    end

/home/longtran/sample_app/test/fixtures/microposts.yml:
    2    content: "I just ate an orange!"
    3    created_at: <%= 10.minutes.ago %>
    4:   user: michael
    5
    6  tau_manifesto:
    7    content: "Check out the @tauday site by @mhartl: http://tauday.com"
    8    created_at: <%= 3.years.ago %>
    9:   user: michael
   10
   11  cat_video:
   12    content: "Sad cats are sad: http://youtu.be/PKffm2uI4dk"
   13    created_at: <%= 2.hours.ago %>
   14:   user: michael
   15
   16  most_recent:
   17    content: "Writing a short test"
   18    created_at: <%= Time.zone.now %>
   19:   user: michael
   20
   21  <% 30.times do |n| %>
   ..
   23    content: <%= Faker::Lorem.sentence(5) %>
   24    created_at: <%= 42.days.ago %>
   25:   user: michael
   26  <% end %>
   27
   ..
   29    content: "Oh, is that what you want? Because that's how you get ants!"
   30    created_at: <%= 2.years.ago %>
   31:   user: archer
   32
   33  zone:
   34    content: "Danger zone!"
   35    created_at: <%= 3.days.ago %>
   36:   user: archer
   37
   38  tone:
   39    content: "I'm sorry. Your words made sense, but your sarcastic tone did not."
   40    created_at: <%= 10.minutes.ago %>
   41:   user: lana
   42
   43  van:
   44    content: "Dude, this van's, like, rolling probable cause."
   45    created_at: <%= 4.hours.ago %>
   46: user: lana
   47

/home/longtran/sample_app/test/fixtures/users.yml:
    2    name: Michael Example
    3    email: michael@example.com
    4:   password_digest: <%= User.digest('password') %>
    5    admin: true
    6    activated: true
    .
   10    name: Sterling Archer
   11    email: duchess@example.gov
   12:   password_digest: <%= User.digest('password') %>
   13    activated: true
   14    activated_at: <%= Time.zone.now %>
   ..
   17    name: Lana Kane
   18    email: hands@example.gov
   19:   password_digest: <%= User.digest('password') %>
   20    activated: true
   21    activated_at: <%= Time.zone.now %>
   ..
   24    name: Malory Archer
   25    email: boss@example.gov
   26:   password_digest: <%= User.digest('password') %>
   27    activated: true
   28    activated_at: <%= Time.zone.now %>
   29
   30  <% 30.times do |n| %>
   31: user_<%= n %>:
   32:   name:  <%= "User #{n}" %>
   33:   email: <%= "user-#{n}@example.com" %>
   34:   password_digest: <%= User.digest('password') %>
   35    activated: true
   36    activated_at: <%= Time.zone.now %>

/home/longtran/sample_app/test/helpers/sessions_helper_test.rb:
    3  class SessionsHelperTest < ActionView::TestCase
    4    def setup
    5:     @user = users(:michael)
    6:     remember(@user)
    7    end
    8
    9:   test "current_user returns right user when session is nil" do
   10:     assert_equal @user, current_user
   11      assert is_logged_in?
   12    end
   13
   14:   test "current_user returns nil when remember digest is wrong" do
   15:     @user.update_attribute(:remember_digest, User.digest(User.new_token))
   16:     assert_nil current_user
   17    end
   18  end

/home/longtran/sample_app/test/integration/following_test.rb:
    3  class FollowingTest < ActionDispatch::IntegrationTest
    4    def setup
    5:     @user = users :michael
    6:     @other = users :archer
    7:     log_in_as @user
    8    end
    9
   10    test "following page" do
   11:     get following_user_path(@user)
   12:     assert_not @user.following.empty?
   13:     assert_match @user.following.count.to_s, response.body
   14:     @user.following.each do |user|
   15:       assert_select "a[href=?]", user_path(user)
   16      end
   17    end
   18
   19    test "followers page" do
   20:     get followers_user_path(@user)
   21:     assert_not @user.followers.empty?
   22:     assert_match @user.followers.count.to_s, response.body
   23:     @user.followers.each do |user|
   24:       assert_select "a[href=?]", user_path(user)
   25      end
   26    end
   27
   28:   test "should follow a user the standard way" do
   29:     assert_difference "@user.following.count", 1 do
   30        post relationships_path, params: {followed_id: @other.id}
   31      end
   32    end
   33
   34:   test "should follow a user with Ajax" do
   35:     assert_difference "@user.following.count", 1 do
   36        post relationships_path, xhr: true, params: {followed_id: @other.id}
   37      end
   38    end
   39
   40:   test "should unfollow a user the standard way" do
   41:     @user.follow(@other)
   42:     relationship = @user.active_relationships.find_by(followed_id: @other.id)
   43:     assert_difference "@user.following.count", -1 do
   44        delete relationship_path(relationship)
   45      end
   46    end
   47
   48:   test "should unfollow a user with Ajax" do
   49:     @user.follow(@other)
   50:     relationship = @user.active_relationships.find_by(followed_id: @other.id)
   51:     assert_difference "@user.following.count", -1 do
   52        delete relationship_path(relationship), xhr: true
   53      end

/home/longtran/sample_app/test/integration/microposts_interface_test.rb:
    3  class MicropostsInterfaceTest < ActionDispatch::IntegrationTest
    4    def setup
    5:     @user = users(:michael)
    6    end
    7
    8    test "micropost interface" do
    9:     log_in_as(@user)
   10      get root_path
   11      assert_select "div.pagination"
   ..
   25      # Delete post
   26      assert_select "a", text: "delete"
   27:     first_micropost = @user.microposts.order_desc.paginate(page: 1).first
   28      assert_difference "Micropost.count", -1 do
   29        delete micropost_path(first_micropost)
   30      end
   31:     # Visit different user (no delete links)
   32:     get user_path(users(:archer))
   33      assert_select "a", text: "delete", count: 0
   34    end

/home/longtran/sample_app/test/integration/password_resets_test.rb:
    4    def setup
    5      ActionMailer::Base.deliveries.clear
    6:     @user = users(:michael)
    7    end
    8
    .
   16      # Valid email
   17      post password_resets_path,
   18:       params: {password_reset: {email: @user.email}}
   19:     assert_not_equal @user.reset_digest, @user.reload.reset_digest
   20      assert_equal 1, ActionMailer::Base.deliveries.size
   21      assert_not flash.empty?
   ..
   26      get new_password_reset_path
   27      post password_resets_path,
   28:       params: {password_reset: {email: @user.email}}
   29:     user = assigns(:user)
   30:     # Inactive user
   31:     user.toggle!(:activated)
   32:     get edit_password_reset_path id: user.reset_token, email: user.email
   33      assert_redirected_to root_path
   34:     user.toggle!(:activated)
   35      # Wrong email
   36:     get edit_password_reset_path user.reset_token, email: ""
   37      assert_redirected_to root_path
   38      # # Right email, wrong token
   39:     get edit_password_reset_path "wrong token", email: user.email
   40      assert_redirected_to root_path
   41      # Right email, right token
   42:     get edit_password_reset_path user.reset_token, email: user.email
   43      assert_template "password_resets/edit"
   44:     assert_select "input[name=email][type=hidden][value=?]", user.email
   45    end
   46
   ..
   48      get new_password_reset_path
   49      post password_resets_path,
   50:       params: {password_reset: {email: @user.email}}
   51:     user = assigns(:user)
   52      # Invalid password & confirmation
   53:     patch password_reset_path(user.reset_token),
   54:       params: {email: user.email,
   55:                user: {password: "foobaz",
   56                        password_confirmation: "barquux"}}
   57      assert_select "div#error_explanation"
   58      # Empty password
   59:     patch password_reset_path(user.reset_token),
   60:       params: {email: user.email,
   61:                user: {password: "",
   62                        password_confirmation: ""}}
   63      assert_select "div#error_explanation"
   64      # Valid password & confirmation
   65:     patch password_reset_path(user.reset_token),
   66:       params: {email: user.email,
   67:                user: {password: "foobaz",
   68                        password_confirmation: "foobaz"}}
   69      assert is_logged_in?
   70      assert_not flash.empty?
   71:     assert_redirected_to user
   72    end
   73
   ..
   75      get new_password_reset_path
   76      post password_resets_path,
   77:       params: {password_reset: {email: @user.email}}
   78
   79:     @user = assigns(:user)
   80:     @user.update_attribute(:reset_sent_at, 3.hours.ago)
   81:     patch password_reset_path(@user.reset_token),
   82:       params: {email: @user.email,
   83:                user: {password: "foobar",
   84                        password_confirmation: "foobar"}}
   85      assert_response :redirect

/home/longtran/sample_app/test/integration/users_edit_test.rb:
    1  require "test_helper"
    2
    3: class UsersEditTest < ActionDispatch::IntegrationTest
    4    def setup
    5:     @user = users(:michael)
    6    end
    7
    8    test "unsuccessful edit" do
    9:     log_in_as(@user)
   10:     get edit_user_path(@user)
   11:     assert_template "users/edit"
   12:     patch user_path(@user), params: {user: {name:  "",
   13                                              email: "foo@invalid",
   14                                              password:              "foo",
   15                                              password_confirmation: "bar"}}
   16
   17:     assert_template "users/edit"
   18    end
   19
   20    test "successful edit" do
   21:     log_in_as(@user)
   22:     get edit_user_path(@user)
   23:     assert_template "users/edit"
   24      name  = "Foo Bar"
   25      email = "foo@bar.com"
   26:     patch user_path(@user), params: {user: {name:  name,
   27                                              email: email,
   28                                              password:              "",
   29                                              password_confirmation: ""}}
   30      assert_not flash.empty?
   31:     assert_redirected_to @user
   32:     @user.reload
   33:     assert_equal name,  @user.name
   34:     assert_equal email, @user.email
   35    end
   36
   37    test "successful edit with friendly forwarding" do
   38:     get edit_user_path(@user)
   39:     log_in_as(@user)
   40:     assert_redirected_to edit_user_url(@user)
   41      name  = "Foo Bar"
   42      email = "foo@bar.com"
   43:     patch user_path(@user), params: {user: {name:  name,
   44                                              email: email,
   45                                              password:              "",
   46                                              password_confirmation: ""}}
   47      assert_not flash.empty?
   48:     assert_redirected_to @user
   49:     @user.reload
   50:     assert_equal name,  @user.name
   51:     assert_equal email, @user.email
   52    end
   53  end

/home/longtran/sample_app/test/integration/users_index_test.rb:
    1  require "test_helper"
    2
    3: class UsersIndexTest < ActionDispatch::IntegrationTest
    4    def setup
    5:     @admin = users(:michael)
    6:     @non_admin = users(:archer)
    7    end
    8
    9    test "index as admin including pagination and delete links" do
   10      log_in_as @admin
   11:     get users_path
   12:     assert_template "users/index"
   13      assert_select "div.pagination"
   14:     first_page_of_users = User.paginate(page: 1, per_page: Settings.per_page)
   15:     first_page_of_users.each do |user|
   16:       assert_select "a[href=?]", user_path(user), text: user.name
   17:       unless user == @admin
   18:         assert_select "a[href=?]", user_path(user), text: "Delete"
   19        end
   20      end
   21:     assert_difference "User.count", -1 do
   22:       delete user_path @non_admin
   23      end
   24    end
   ..
   26    test "index as non-admin" do
   27      log_in_as @non_admin
   28:     get users_path
   29      assert_select "a", text: "delete", count: 0
   30    end

/home/longtran/sample_app/test/integration/users_login_test.rb:
    1  require "test_helper"
    2
    3: class UsersLoginTest < ActionDispatch::IntegrationTest
    4    def setup
    5:     @user = users :michael
    6    end
    7
    .
   20      post login_path, params: {
   21        session: {
   22:         email: @user.email,
   23          password: "password"
   24        }
   25      }
   26      assert is_logged_in?
   27:     assert_redirected_to @user
   28      follow_redirect!
   29:     assert_template "users/show"
   30      assert_select "a[href=?]", login_path, count: 0
   31      assert_select "a[href=?]", logout_path
   32:     assert_select "a[href=?]", user_path(@user)
   33      delete logout_path
   34      assert_not is_logged_in?
   ..
   38      assert_select "a[href=?]", login_path
   39      assert_select "a[href=?]", logout_path, count: 0
   40:     assert_select "a[href=?]", user_path(@user), count: 0
   41    end
   42
   43    test "login with remembering" do
   44:     log_in_as(@user, remember_me: "1")
   45      assert_not_empty cookies[:remember_token]
   46    end
   47
   48    test "login without remembering" do
   49:     log_in_as(@user, remember_me: "1")
   50:     log_in_as(@user, remember_me: "0")
   51      assert_empty cookies[:remember_token]
   52    end

/home/longtran/sample_app/test/integration/users_profile_test.rb:
    1  require "test_helper"
    2
    3: class UsersProfileTest < ActionDispatch::IntegrationTest
    4    include ApplicationHelper
    5
    6    def setup
    7:     @user = users(:michael)
    8    end
    9
   10    test "profile display" do
   11:     log_in_as @user
   12:     get user_path(@user)
   13:     assert_template "users/show"
   14:     assert_select "title", full_title(@user.name)
   15:     assert_select "h1", text: @user.name
   16      assert_select "h1>img.gravatar"
   17:     assert_match @user.microposts.count.to_s, response.body
   18      assert_select "div.pagination"
   19:     @user.microposts.order_desc.paginate(page: 1).each do |micropost|
   20        assert_match micropost.content, response.body
   21      end

/home/longtran/sample_app/test/integration/users_signup_test.rb:
    1  require "test_helper"
    2
    3: class UsersSignupTest < ActionDispatch::IntegrationTest
    4    def setup
    5      ActionMailer::Base.deliveries.clear
    .
    8    test "invalid signup information" do
    9      get signup_path
   10:     assert_no_difference "User.count" do
   11:       post users_path, params: {user: {name: "",
   12:                                        email: "user@invalid",
   13                                         password: "foo",
   14                                         password_confirmation: "bar"}}
   15      end
   16:     assert_template "users/new"
   17      assert_select "div#error_explanation"
   18      assert_select "div.field_with_errors"
   ..
   21    test "valid signup information with account activation" do
   22      get signup_path
   23:     assert_difference "User.count", 1 do
   24:       post users_path, params: {user: {name: "Example User",
   25:                                        email: "user@example.com",
   26                                         password: "password",
   27                                         password_confirmation: "password"}}
   28      end
   29      assert_equal 1, ActionMailer::Base.deliveries.size
   30:     user = assigns :user
   31:     assert_not user.activated?
   32:     log_in_as user
   33      assert_not is_logged_in?
   34:     get edit_account_activation_path "invalid token", email: user.email
   35      assert_not is_logged_in?
   36:     get edit_account_activation_path user.activation_token, email: "wrong"
   37      assert_not is_logged_in?
   38:     get edit_account_activation_path user.activation_token, email: user.email
   39:     assert user.reload.activated?
   40      follow_redirect!
   41:     assert_template "users/show"
   42      assert is_logged_in?
   43    end

/home/longtran/sample_app/test/mailers/previews/user_mailer_preview.rb:
    1: class UserMailerPreview < ActionMailer::Preview
    2    def account_activation
    3:     user = User.first
    4:     user.activation_token = User.new_token
    5:     UserMailer.account_activation user
    6    end
    7
    8    def password_reset
    9:     user = User.first
   10:     user.reset_token = User.new_token
   11:     UserMailer.password_reset user
   12    end
   13  end

/home/longtran/sample_app/test/mailers/user_mailer_test.rb:
    1  require "test_helper"
    2
    3: class UserMailerTest < ActionMailer::TestCase
    4    test "account_activation" do
    5:     user = users(:michael)
    6:     user.activation_token = User.new_token
    7:     mail = UserMailer.account_activation(user)
    8      assert_equal "Account activation", mail.subject
    9:     assert_equal [user.email], mail.to
   10      assert_equal ["noreply@example.com"], mail.from
   11:     assert_match user.name, mail.body.encoded
   12:     assert_match user.activation_token, mail.body.encoded
   13:     assert_match CGI.escape(user.email), mail.body.encoded
   14    end
   15
   16    test "password_reset" do
   17:     user = users(:michael)
   18:     user.reset_token = User.new_token
   19:     mail = UserMailer.password_reset(user)
   20      assert_equal "Password reset", mail.subject
   21:     assert_equal [user.email], mail.to
   22      assert_equal ["noreply@example.com"], mail.from
   23:     assert_match user.reset_token, mail.body.encoded
   24:     assert_match CGI.escape(user.email), mail.body.encoded
   25    end
   26  end

/home/longtran/sample_app/test/models/micropost_test.rb:
    3  class MicropostTest < ActiveSupport::TestCase
    4    def setup
    5:     @user = users(:michael)
    6:     @micropost = @user.microposts.build(content: "Lorem ipsum")
    7    end
    8
    .
   11    end
   12
   13:   test "user id should be present" do
   14:     @micropost.user_id = nil
   15      assert_not @micropost.valid?
   16    end

/home/longtran/sample_app/test/models/relationship_test.rb:
    3  class RelationshipTest < ActiveSupport::TestCase
    4    def setup
    5:     @relationship = Relationship.new(follower_id: users(:michael).id,
    6:                                      followed_id: users(:archer).id)
    7    end
    8

/home/longtran/sample_app/test/models/user_test.rb:
    1  require "test_helper"
    2: class UserTest < ActiveSupport::TestCase
    3    def setup
    4:     @user = User.new(name: "Example User", email: "user@example.com",
    5                       password: "foobar", password_confirmation: "foobar")
    6    end
    7
    8    test "should be valid" do
    9:     assert @user.valid?
   10    end
   11
   12    test "name should be present" do
   13:     @user.name = "     "
   14:     assert_not @user.valid?
   15    end
   16
   17    test "email should be present" do
   18:     @user.email = "     "
   19:     assert_not @user.valid?
   20    end
   21
   22    test "name should not be too long" do
   23:     @user.name = "a" * 51
   24:     assert_not @user.valid?
   25    end
   26
   27    test "email should not be too long" do
   28:     @user.email = "a" * 244 + "@example.com"
   29:     assert_not @user.valid?
   30    end
   31
   32    test "email validation should accept valid addresses" do
   33:     valid_addresses = %w(user@example.com USER@foo.COM A_US-ER@foo.bar.org
   34                           first.last@foo.jp alice+bob@baz.cn)
   35      valid_addresses.each do |valid_address|
   36:       @user.email = valid_address
   37:       assert @user.valid?, "#{valid_address.inspect} should be valid"
   38      end
   39    end
   40
   41    test "email validation should reject invalid addresses" do
   42:     invalid_addresses = %w(user@example,com user_at_foo.org user.name@example.
   43                             foo@bar_baz.com foo@bar+baz.com)
   44      invalid_addresses.each do |invalid_address|
   45:       @user.email = invalid_address
   46:       assert_not @user.valid?, "#{invalid_address.inspect} should be invalid"
   47      end
   48    end
   49
   50    test "email addresses should be unique" do
   51:     duplicate_user = @user.dup
   52:     duplicate_user.email = @user.email.upcase
   53:     @user.save
   54:     assert_not duplicate_user.valid?
   55    end
   56
   57    test "email addresses should be saved as lower-case" do
   58      mixed_case_email = "Foo@ExAMPle.CoM"
   59:     @user.email = mixed_case_email
   60:     @user.save
   61:     assert_equal mixed_case_email.downcase, @user.reload.email
   62    end
   63
   64    test "password should be present (nonblank)" do
   65:     @user.password = @user.password_confirmation = " " * 6
   66:     assert_not @user.valid?
   67    end
   68
   69    test "password should have a minimum length" do
   70:     @user.password = @user.password_confirmation = "a" * 5
   71:     assert_not @user.valid?
   72    end
   73
   74:   test "authenticated? should return false for a user with nil digest" do
   75:     assert_not @user.authenticated? :remember, ""
   76    end
   77
   78:   test "should follow and unfollow a user" do
   79:     michael = users(:michael)
   80:     archer  = users(:archer)
   81      assert_not michael.following?(archer)
   82      michael.follow(archer)
   ..
   88
   89    test "feed should have the right posts" do
   90:     michael = users(:michael)
   91:     archer  = users(:archer)
   92:     lana    = users(:lana)
   93      lana.microposts.each do |post_following|
   94        assert michael.feed.include?(post_following)

/home/longtran/sample_app/test/test_helper.rb:
    7
    8    def is_logged_in?
    9:     session[:user_id].present?
   10    end
   11
   12:   def log_in_as user
   13:     session[:user_id] = user.id
   14    end
   15  end
   16
   17  class ActionDispatch::IntegrationTest
   18:   def log_in_as user, password: "password", remember_me: "1"
   19:     post login_path, params: {session: {email: user.email,
   20                                          password: password,
   21                                          remember_me: remember_me}}

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/BI/BI8MjoF5KRmaJAmCo-Zl1pu2FIiHx7gXcmPEYai2roI.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/eE/eENVN0H_2oD_QUSvgtBKncRKfnv9Et0MjRnRFzwsvqs.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/lv/lvp0oBT-du0vteuRkhjG-YYxXpQkmhtPXEAvq2CfpHw.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/m8/m8RV6Jib53pxfhAQaiTgUFJpfYn-raiX_ujaG-cnyP0.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/MQ/MQvu2WkmK5fiPmiWWh9vFx8c8KO06YdiLMC4NJfnyI4.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/mt/mth6L8IqVVrnxx7_-bufU6nBAAWT5owHf8TT3gNQTIs.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/Nz/NzJZfTenKb6HTLTqL05UKgCI7uCA6vCt-dgC6IDVp28.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/tA/tAINPEEusDgeThKP9L82tDUCRkN4wevJYNwmd1uon3E.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/bootsnap-compile-cache/2a/c29bd1e4b3b1c7:
    <binary>

/home/longtran/sample_app/tmp/cache/bootsnap-compile-cache/43/73e0637184ab4d:
    <binary>

/home/longtran/sample_app/tmp/cache/bootsnap-compile-cache/57/5067adfb51e7b6:
    <binary>

/home/longtran/sample_app/tmp/cache/bootsnap-compile-cache/7e/28f6e9ecc82e33:
    <binary>

/home/longtran/sample_app/tmp/cache/bootsnap-compile-cache/a0/04ef98db759078:
    <binary>

/home/longtran/sample_app/tmp/cache/bootsnap-compile-cache/da/d3b20d0758671f:
    <binary>

/home/longtran/sample_app/tmp/cache/bootsnap-compile-cache/fa/cdd78bcddbc9ac:
    <binary>

/home/longtran/sample_app/tmp/cache/bootsnap-load-path-cache:
    <binary>

28502 matches across 91 files


Searching 1033 files for "users"

/home/longtran/sample_app/app/assets/stylesheets/custom.scss:
  177  }
  178
  179: .users.follow {
  180    padding: 0;
  181  }
  ...
  222  }
  223
  224: /* Users index */
  225: .users {
  226    list-style: none;
  227    margin: 0;

/home/longtran/sample_app/app/controllers/users_controller.rb:
    1: class UsersController < ApplicationController
    2    before_action :logged_in_user, except: %i(new show create)
    3    before_action :load_user, except: %i(new index create)
    .
    6
    7    def index
    8:     @users = User.paginate page: params[:page],
    9        per_page: Settings.per_page
   10    end
   ..
   43      if @user.destroy
   44        flash[:success] = t "user_deleted"
   45:       redirect_to users_url
   46      else
   47        flash[:danger] = t "errors.delete_failed"
   ..
   52    def following
   53      @title = t "following"
   54:     @users = @user.following.paginate page: params[:page]
   55      render :show_follow
   56    end
   ..
   58    def followers
   59      @title = t "followers"
   60:     @users = @user.followers.paginate page: params[:page]
   61      render :show_follow
   62    end

/home/longtran/sample_app/app/helpers/users_helper.rb:
    1: module UsersHelper
    2    def gravatar_for user, options = {size: Settings.size_ava}
    3      gravatar_id = Digest::MD5.hexdigest(user.email.downcase)

/home/longtran/sample_app/app/views/layouts/_header.html.erb:
    7          <li><%= link_to t("static_pages.help.title"), help_path %></li>
    8          <% if logged_in? %>
    9:           <li><%= link_to t("users"), users_path %></li>
   10            <li class="dropdown">
   11              <%= link_to t("account"), "#", "data-toggle": "dropdown", class: "dropdown-toggle" %>

/home/longtran/sample_app/app/views/relationships/create.js.erb:
    1: $("#follow_form").html("<%= j render "users/unfollow" %>");
    2  $("#followers").html("<%= @user.followers.count %>");
    3

/home/longtran/sample_app/app/views/relationships/destroy.js.erb:
    1: $("#follow_form").html("<%= j render "users/follow" %>");
    2  $("#followers").html("<%= @user.followers.count %>");
    3

/home/longtran/sample_app/app/views/users/index.html.erb:
    1: <% provide :title, t("all_users") %>
    2: <h1><%= t "all_users" %></h1>
    3  <%= will_paginate %>
    4: <ul class="users">
    5:   <%= render @users %>
    6  </ul>
    7  <%= will_paginate %>

/home/longtran/sample_app/app/views/users/show_follow.html.erb:
   10      <section class="stats">
   11        <%= render "shared/stats" %>
   12:       <% if @users.any? %>
   13          <div class="user_avatars">
   14:           <% @users.each do |user| %>
   15              <%= link_to gravatar_for(user, size: Settings.gravatar), user %>
   16            <% end %>
   ..
   21    <div class="col-md-8">
   22      <h3><%= @title %></h3>
   23:     <% if @users.any? %>
   24:       <ul class="users follow">
   25:         <%= render @users %>
   26        </ul>
   27        <%= will_paginate %>

/home/longtran/sample_app/config/locales/en.yml:
   54        screencast: "screencast series"
   55        main:  "Ruby on Rails"
   56:   users:
   57      new:
   58:       signup_html: "This will be a signup page for new users."
   59    main_title: "Ruby on Rails Tutorial Sample App"
   60    signup: "Sign up now!"
   ..
   69    settings: "Settings"
   70    logout: "Log Out"
   71:   users: "Users"
   72    account: "Account"
   73    profile_updated: "Profile updated"
   74:   all_users: "All users"
   75    delete: "Delete"
   76    sure?: "You sure?"
   ..
  128      email_not_found: "Email not found"
  129      invalid_user: "Invalid User"
  130:     user_not_found: "Users Not Found"
  131      please_login: "Please log in."
  132      delete_failed: "Deleted Failed"

/home/longtran/sample_app/config/routes.rb:
    5    get "/about", to: "static_pages#about"
    6    get "/contact", to: "static_pages#contact"
    7:   get "/signup", to: "users#new"
    8    get "/login", to: "sessions#new"
    9    post "/login", to: "sessions#create"
   10    delete "/logout", to: "sessions#destroy"
   11:   resources :users do
   12      member do
   13        get :following, :followers

/home/longtran/sample_app/db/development.sqlite3:
    <binary>

/home/longtran/sample_app/db/migrate/20190529033504_create_users.rb:
    1: class CreateUsers < ActiveRecord::Migration[5.2]
    2    def change
    3:     create_table :users do |t|
    4        t.string :name
    5        t.string :email

/home/longtran/sample_app/db/migrate/20190529035455_add_index_to_users_email.rb:
    1: class AddIndexToUsersEmail < ActiveRecord::Migration[5.2]
    2    def change
    3:     add_index :users, :email, unique: true
    4    end
    5  end

/home/longtran/sample_app/db/migrate/20190529035833_add_password_digest_to_users.rb:
    1: class AddPasswordDigestToUsers < ActiveRecord::Migration[5.2]
    2    def change
    3:     add_column :users, :password_digest, :string
    4    end
    5  end

/home/longtran/sample_app/db/migrate/20190530075249_add_remember_digest_to_users.rb:
    1: class AddRememberDigestToUsers < ActiveRecord::Migration[5.2]
    2    def change
    3:     add_column :users, :remember_digest, :string
    4    end
    5  end

/home/longtran/sample_app/db/migrate/20190531024608_add_admin_to_users.rb:
    1: class AddAdminToUsers < ActiveRecord::Migration[5.2]
    2    def change
    3:     add_column :users, :admin, :boolean, default: false
    4    end
    5  end

/home/longtran/sample_app/db/migrate/20190531092119_add_activation_to_users.rb:
    1: class AddActivationToUsers < ActiveRecord::Migration[5.2]
    2    def change
    3:     add_column :users, :activation_digest, :string
    4:     add_column :users, :activated, :boolean, default: false
    5:     add_column :users, :activated_at, :datetime
    6    end
    7  end

/home/longtran/sample_app/db/migrate/20190603020518_add_reset_to_users.rb:
    1: class AddResetToUsers < ActiveRecord::Migration[5.2]
    2    def change
    3:     add_column :users, :reset_digest, :string
    4:     add_column :users, :reset_sent_at, :datetime
    5    end
    6  end

/home/longtran/sample_app/db/schema.rb:
   33    end
   34
   35:   create_table "users", force: :cascade do |t|
   36      t.string "name"
   37      t.string "email"
   ..
   46      t.string "reset_digest"
   47      t.datetime "reset_sent_at"
   48:     t.index ["email"], name: "index_users_on_email", unique: true
   49    end
   50

/home/longtran/sample_app/db/seeds.rb:
   19  end
   20
   21: users = User.order(:created_at).take(6)
   22  50.times do
   23    content = Faker::Lorem.sentence(5)
   24:   users.each { |user| user.microposts.create!(content: content) }
   25  end
   26
   27: users = User.all
   28: user  = users.first
   29: following = users[2..50]
   30: followers = users[3..40]
   31  following.each { |followed| user.follow(followed) }
   32  followers.each { |follower| follower.follow(user) }

/home/longtran/sample_app/db/test.sqlite3:
    <binary>

/home/longtran/sample_app/log/development.log:
    <binary>

/home/longtran/sample_app/log/test.log:
    <binary>

/home/longtran/sample_app/test/controllers/microposts_controller_test.rb:
   21
   22    test "should redirect destroy for wrong micropost" do
   23:     log_in_as(users(:michael))
   24      micropost = microposts(:ants)
   25      assert_no_difference "Micropost.count" do

/home/longtran/sample_app/test/controllers/users_controller_test.rb:
    1  require "test_helper"
    2
    3: class UsersControllerTest < ActionDispatch::IntegrationTest
    4    def setup
    5:     @user = users(:michael)
    6:     @other_user = users(:archer)
    7    end
    8    test "should get new" do
    .
   40
   41    test "should redirect index when not logged in" do
   42:     get users_path
   43      assert_redirected_to login_url
   44    end

/home/longtran/sample_app/test/helpers/sessions_helper_test.rb:
    3  class SessionsHelperTest < ActionView::TestCase
    4    def setup
    5:     @user = users(:michael)
    6      remember(@user)
    7    end

/home/longtran/sample_app/test/integration/following_test.rb:
    3  class FollowingTest < ActionDispatch::IntegrationTest
    4    def setup
    5:     @user = users :michael
    6:     @other = users :archer
    7      log_in_as @user
    8    end

/home/longtran/sample_app/test/integration/microposts_interface_test.rb:
    3  class MicropostsInterfaceTest < ActionDispatch::IntegrationTest
    4    def setup
    5:     @user = users(:michael)
    6    end
    7
    .
   30      end
   31      # Visit different user (no delete links)
   32:     get user_path(users(:archer))
   33      assert_select "a", text: "delete", count: 0
   34    end

/home/longtran/sample_app/test/integration/password_resets_test.rb:
    4    def setup
    5      ActionMailer::Base.deliveries.clear
    6:     @user = users(:michael)
    7    end
    8

/home/longtran/sample_app/test/integration/users_edit_test.rb:
    1  require "test_helper"
    2
    3: class UsersEditTest < ActionDispatch::IntegrationTest
    4    def setup
    5:     @user = users(:michael)
    6    end
    7
    .
    9      log_in_as(@user)
   10      get edit_user_path(@user)
   11:     assert_template "users/edit"
   12      patch user_path(@user), params: {user: {name:  "",
   13                                              email: "foo@invalid",
   ..
   15                                              password_confirmation: "bar"}}
   16
   17:     assert_template "users/edit"
   18    end
   19
   ..
   21      log_in_as(@user)
   22      get edit_user_path(@user)
   23:     assert_template "users/edit"
   24      name  = "Foo Bar"
   25      email = "foo@bar.com"

/home/longtran/sample_app/test/integration/users_index_test.rb:
    1  require "test_helper"
    2
    3: class UsersIndexTest < ActionDispatch::IntegrationTest
    4    def setup
    5:     @admin = users(:michael)
    6:     @non_admin = users(:archer)
    7    end
    8
    9    test "index as admin including pagination and delete links" do
   10      log_in_as @admin
   11:     get users_path
   12:     assert_template "users/index"
   13      assert_select "div.pagination"
   14:     first_page_of_users = User.paginate(page: 1, per_page: Settings.per_page)
   15:     first_page_of_users.each do |user|
   16        assert_select "a[href=?]", user_path(user), text: user.name
   17        unless user == @admin
   ..
   26    test "index as non-admin" do
   27      log_in_as @non_admin
   28:     get users_path
   29      assert_select "a", text: "delete", count: 0
   30    end

/home/longtran/sample_app/test/integration/users_login_test.rb:
    1  require "test_helper"
    2
    3: class UsersLoginTest < ActionDispatch::IntegrationTest
    4    def setup
    5:     @user = users :michael
    6    end
    7
    .
   27      assert_redirected_to @user
   28      follow_redirect!
   29:     assert_template "users/show"
   30      assert_select "a[href=?]", login_path, count: 0
   31      assert_select "a[href=?]", logout_path

/home/longtran/sample_app/test/integration/users_profile_test.rb:
    1  require "test_helper"
    2
    3: class UsersProfileTest < ActionDispatch::IntegrationTest
    4    include ApplicationHelper
    5
    6    def setup
    7:     @user = users(:michael)
    8    end
    9
   ..
   11      log_in_as @user
   12      get user_path(@user)
   13:     assert_template "users/show"
   14      assert_select "title", full_title(@user.name)
   15      assert_select "h1", text: @user.name

/home/longtran/sample_app/test/integration/users_signup_test.rb:
    1  require "test_helper"
    2
    3: class UsersSignupTest < ActionDispatch::IntegrationTest
    4    def setup
    5      ActionMailer::Base.deliveries.clear
    .
    9      get signup_path
   10      assert_no_difference "User.count" do
   11:       post users_path, params: {user: {name: "",
   12                                         email: "user@invalid",
   13                                         password: "foo",
   14                                         password_confirmation: "bar"}}
   15      end
   16:     assert_template "users/new"
   17      assert_select "div#error_explanation"
   18      assert_select "div.field_with_errors"
   ..
   22      get signup_path
   23      assert_difference "User.count", 1 do
   24:       post users_path, params: {user: {name: "Example User",
   25                                         email: "user@example.com",
   26                                         password: "password",
   ..
   39      assert user.reload.activated?
   40      follow_redirect!
   41:     assert_template "users/show"
   42      assert is_logged_in?
   43    end

/home/longtran/sample_app/test/mailers/user_mailer_test.rb:
    3  class UserMailerTest < ActionMailer::TestCase
    4    test "account_activation" do
    5:     user = users(:michael)
    6      user.activation_token = User.new_token
    7      mail = UserMailer.account_activation(user)
    .
   15
   16    test "password_reset" do
   17:     user = users(:michael)
   18      user.reset_token = User.new_token
   19      mail = UserMailer.password_reset(user)

/home/longtran/sample_app/test/models/micropost_test.rb:
    3  class MicropostTest < ActiveSupport::TestCase
    4    def setup
    5:     @user = users(:michael)
    6      @micropost = @user.microposts.build(content: "Lorem ipsum")
    7    end

/home/longtran/sample_app/test/models/relationship_test.rb:
    3  class RelationshipTest < ActiveSupport::TestCase
    4    def setup
    5:     @relationship = Relationship.new(follower_id: users(:michael).id,
    6:                                      followed_id: users(:archer).id)
    7    end
    8

/home/longtran/sample_app/test/models/user_test.rb:
   77
   78    test "should follow and unfollow a user" do
   79:     michael = users(:michael)
   80:     archer  = users(:archer)
   81      assert_not michael.following?(archer)
   82      michael.follow(archer)
   ..
   88
   89    test "feed should have the right posts" do
   90:     michael = users(:michael)
   91:     archer  = users(:archer)
   92:     lana    = users(:lana)
   93      lana.microposts.each do |post_following|
   94        assert michael.feed.include?(post_following)

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/BI/BI8MjoF5KRmaJAmCo-Zl1pu2FIiHx7gXcmPEYai2roI.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/eE/eENVN0H_2oD_QUSvgtBKncRKfnv9Et0MjRnRFzwsvqs.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/lv/lvp0oBT-du0vteuRkhjG-YYxXpQkmhtPXEAvq2CfpHw.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/m8/m8RV6Jib53pxfhAQaiTgUFJpfYn-raiX_ujaG-cnyP0.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/MQ/MQvu2WkmK5fiPmiWWh9vFx8c8KO06YdiLMC4NJfnyI4.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/mt/mth6L8IqVVrnxx7_-bufU6nBAAWT5owHf8TT3gNQTIs.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/Nz/NzJZfTenKb6HTLTqL05UKgCI7uCA6vCt-dgC6IDVp28.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/assets/sprockets/v3.0/tA/tAINPEEusDgeThKP9L82tDUCRkN4wevJYNwmd1uon3E.cache:
    <binary>

/home/longtran/sample_app/tmp/cache/bootsnap-compile-cache/57/5067adfb51e7b6:
    <binary>

/home/longtran/sample_app/tmp/cache/bootsnap-compile-cache/7e/28f6e9ecc82e33:
    <binary>

/home/longtran/sample_app/tmp/cache/bootsnap-compile-cache/a0/04ef98db759078:
    <binary>

/home/longtran/sample_app/tmp/cache/bootsnap-compile-cache/da/d3b20d0758671f:
    <binary>

/home/longtran/sample_app/tmp/cache/bootsnap-compile-cache/fa/cdd78bcddbc9ac:
    <binary>

/home/longtran/sample_app/tmp/cache/bootsnap-load-path-cache:
    <binary>

16846 matches across 52 files
